<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>XXXYJade's NeoForge-1.20.4</title><link>https://XXXYJade17.github.io/NeoForge.github.io</link><description>学习笔记</description><copyright>XXXYJade's NeoForge-1.20.4</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/196541443?v=4</url><title>avatar</title><link>https://XXXYJade17.github.io/NeoForge.github.io</link></image><lastBuildDate>Sun, 16 Mar 2025 14:09:17 +0000</lastBuildDate><managingEditor>XXXYJade's NeoForge-1.20.4</managingEditor><ttl>60</ttl><webMaster>XXXYJade's NeoForge-1.20.4</webMaster><item><title>12.Entity子类——Animal</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/12.Entity-zi-lei-%E2%80%94%E2%80%94Animal.html</link><description>**前面我们创建了一个实体，但是其实Entity有很多子类，运用这些子类会更便捷与我们的开发**
## 一.先创建我们的实体三件套
### 主体
```java
public class FirstAnimal extends Animal {
    //构造方法
    public FirstAnimal(EntityType&lt;? extends Animal&gt; entityType, Level level) {
        super(entityType, level);
    }
    //注册Goal
    @Override
    protected void registerGoals() {
        this.goalSelector.addGoal(0,new MyGoal(this));
    }
    //属性
    public static AttributeSupplier.Builder createAttributes() {
        return Mob.createMobAttributes()
                .add(Attributes.MAX_HEALTH, 20.0);
    }
    //繁殖
    @Override
    public AgeableMob getBreedOffspring(ServerLevel level, AgeableMob otherParent) {
        return null;
    }
}
```
### 模型
```java
public class AnimalModel extends EntityModel&lt;FirstAnimal&gt; {
    public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation(TestMod.MODID, 'first_animal'), 'main');
    private final ModelPart body;
    //构造方法
    public AnimalModel(ModelPart modelPart) {
        this.body = modelPart.getChild('body');
    }
    // 创建模型层
    public static LayerDefinition createBodyLayer() {
        MeshDefinition meshdefinition = new MeshDefinition();
        PartDefinition partdefinition = meshdefinition.getRoot();

        PartDefinition body =
                partdefinition.addOrReplaceChild('body',
                        CubeListBuilder.create().
                                texOffs(0, 0).
                                addBox(-8.0F,
                                        -20.0F,
                                        -8.0F,
                                        16.0F,
                                        11.0F,
                                        16.0F,
                                        new CubeDeformation(0.0F)),
                        PartPose.offset(0.0F, 24.0F, 0.0F));

        return LayerDefinition.create(meshdefinition, 64, 64);
    }
    //动画
    @Override
    public void setupAnim(FirstAnimal firstAnimal, float v, float v1, float v2, float v3, float v4) {

    }
    // 渲染模型
    @Override
    public void renderToBuffer(PoseStack poseStack, VertexConsumer vertexConsumer, int i, int i1, float v, float v1, float v2, float v3) {
        body.render(poseStack, vertexConsumer, i, i1, v, v1, v2, v3);
    }
}
```
### 渲染
```java
public class AnimalRenderer extends MobRenderer&lt;FirstAnimal, AnimalModel&gt; {
    // 构造函数
    public AnimalRenderer(EntityRendererProvider.Context context) {
        super(context, new AnimalModel(context.bakeLayer(AnimalModel.LAYER_LOCATION)), 1f);
    }
    // 返回实体的纹理
    @Override
    public ResourceLocation getTextureLocation(FirstAnimal firstAnimal) {
        return new ResourceLocation(TestMod.MODID, 'textures/entity/first_animal.png');
    }
}
```
## 二.创建Goal
在FirstAnimal里我们有一个用于注册Goal的方法
Goal其实就是实体的AI行为
```java
public class MyGoal extends Goal {
    private FirstAnimal animal;
    // 构造方法
    public MyGoal(FirstAnimal animal) {
        this.animal = animal;
    }
    //执行逻辑，给附近玩家饥饿效果
    @Override
    public boolean canUse() {
        Level level = this.animal.level();
        if(!level.isClientSide){
            Player nearestPlayer = level.getNearestPlayer(this.animal, 10);
            if(nearestPlayer!=null){
                nearestPlayer.addEffect(new MobEffectInstance(MobEffects.HUNGER, 3 * 20, 3));
            }

        }
        return true;
    }
}
```
## 三.最后把他们注册进去
### 这部分同实体
```java
public static final Supplier&lt;EntityType&lt;FirstAnimal&gt;&gt; FIRST_ANIMAL =
            ENTITY_TYPES.register('first_animal',
                    () -&gt; EntityType.Builder.of(FirstAnimal::new, MobCategory.MISC).build('first_animal'));
```
```java
@SubscribeEvent
public static void registerEntityLayers(EntityRenderersEvent.RegisterLayerDefinitions evt) {
    evt.registerLayerDefinition(AnimalModel.LAYER_LOCATION, AnimalModel::createBodyLayer);
}
@SubscribeEvent
public static void onClientEvent(FMLClientSetupEvent event){
    event.enqueueWork(()-&gt;{
        EntityRenderers.register(Registry.FIRST_ANIMAL.get(), AnimalRenderer ::new);
    });
}
```
### 这里需要额外注册我们Animal的属性
```java
@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD)
    public static class ModEventBus{
        @SubscribeEvent
        public static void setupAttributes(EntityAttributeCreationEvent event) {
            event.put(Registry.FIRST_ANIMAL.get(), FirstAnimal.createAttributes().build());
        }
    }
```
## ClientEventHandler 完整代码(包含了[Entity](https://xxxyjade17.github.io/NeoForge.github.io/post/11.Entity-shi-ti.html)的部分)
```java
@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD,value = Dist.CLIENT)
public class ClientEventHandler {
    @SubscribeEvent
    public static void registerEntityLayers(EntityRenderersEvent.RegisterLayerDefinitions evt) {
        evt.registerLayerDefinition(FlyingSwordModel.LAYER_LOCATION, FlyingSwordModel::createBodyLayer);
        evt.registerLayerDefinition(AnimalModel.LAYER_LOCATION, AnimalModel::createBodyLayer);
    }
    @SubscribeEvent
    public static void onClientEvent(FMLClientSetupEvent event){
        event.enqueueWork(()-&gt;{
            EntityRenderers.register(Registry.FLYING_SWORD_ENTITY.get(), FlyingSwordEntityRenderer::new);
        });
        event.enqueueWork(()-&gt;{
            EntityRenderers.register(Registry.FIRST_ANIMAL.get(), AnimalRenderer ::new);
        });
    }
    @Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD)
    public static class ModEventBus{
        @SubscribeEvent
        public static void setupAttributes(EntityAttributeCreationEvent event) {
            event.put(Registry.FIRST_ANIMAL.get(), FirstAnimal.createAttributes().build());
        }

    }
}
```。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/12.Entity-zi-lei-%E2%80%94%E2%80%94Animal.html</guid><pubDate>Sun, 16 Mar 2025 14:08:47 +0000</pubDate></item><item><title>11.Entity实体</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/11.Entity-shi-ti.html</link><description>## 一.创建三个类分别继承 Entity , EntityRenderer , EntityModel&lt;&gt;
```java
public class FlyingSwordEntity extends Entity {
    public FlyingSwordEntity(EntityType&lt;?&gt; entityType, Level level){
        super(entityType, level);
    }
}
```
```java
public class FlyingSwordEntityRenderer extends EntityRenderer {
    public FlyingSwordEntityRenderer(EntityRendererProvider.Context context) {
        super(context);
        flyingSwordModel = new FlyingSwordModel(context.bakeLayer(FlyingSwordModel.LAYER_LOCATION));
    }
}
```
```java
public class FlyingSwordModel extends EntityModel&lt;FlyingSwordEntity&gt; {
    private final ModelPart body;
    public static final ModelLayerLocation LAYER_LOCATION = 
        new ModelLayerLocation(new ResourceLocation(TestMod.MODID, 'flying_sword_entity'), 'main');

    public FlyingSwordModel(ModelPart modelPart) {
        this.body = modelPart.getChild('body');
    }
}
```
## 二.完善FlyingSwordEntity
```java
 private static final EntityDataAccessor&lt;Integer&gt; COUNTER =
    SynchedEntityData.defineId(FlyingSwordEntity.class, EntityDataSerializers.INT);

@Override
public void tick() {
    Integer i=this.entityData.get(COUNTER); //获取实体数据
    if(!this.level().isClientSide()){   //服务端执行逻辑
        this.entityData.set(COUNTER,i+1);   //设置实体数据
    }
    super.tick();
}
@Override
protected void defineSynchedData() {
    this.entityData.define(COUNTER,0);
}
@Override
protected void readAdditionalSaveData(CompoundTag compoundTag) {
    this.entityData.set(COUNTER,compoundTag.getInt('counter'));
}
@Override
protected void addAdditionalSaveData(CompoundTag compoundTag) {
    compoundTag.putInt('counter',this.entityData.get(COUNTER));
}
```
- COUNTER : 实体数据同步器(INT类型)
- tick : 状态更新
- defineSynchedData : 初始化
- readAdditionalSaveData/addAdditionalSaveData : 数据更新和储存
## 三. 完善FlyingSwordEntityRenderer
```java
private EntityModel&lt;FlyingSwordEntity&gt; flyingSwordModel;
@Override
public ResourceLocation getTextureLocation(Entity entity) {
    return new ResourceLocation(TestMod.MODID, 'textures/entity/flying_sword_entity.png');
}
@Override
public void render(Entity entity, float entityYaw, float partialTick, PoseStack poseStack, MultiBufferSource buffer, int packedLight) {
    super.render(entity, entityYaw, partialTick, poseStack, buffer, packedLight);
    poseStack.pushPose();
    poseStack.mulPose(Axis.YN.rotationDegrees(45));
    poseStack.translate(0, -1, 0);
    VertexConsumer vertexConsumer = 
        buffer.getBuffer(flyingSwordModel.renderType(getTextureLocation(entity)));
    this.flyingSwordModel.renderToBuffer(
        poseStack,vertexConsumer,packedLight, 
        OverlayTexture.NO_OVERLAY,1f,1f,1f,1f
    );
    poseStack.popPose();
}
```
- flyingSwordModel : 实体模型存储
- getTextureLocation : 获取实体模型文件
- render : 渲染
## 四.把这三个东西注册到游戏中
### 先注册Entity，另外两个有点特殊
```java
public static final DeferredRegister&lt;EntityType&lt;?&gt;&gt; ENTITY_TYPES =
            DeferredRegister.create(Registries.ENTITY_TYPE, TestMod.MODID);
public static final Supplier&lt;EntityType&lt;FlyingSwordEntity&gt;&gt; FLYING_SWORD_ENTITY =
            ENTITY_TYPES.register('flying_sword_entity',
                    () -&gt; EntityType.Builder.of(FlyingSwordEntity::new, MobCategory.MISC).sized(2, 0.5F).build('flying_sword_entity'));
```
记得放进线程
`ENTITY_TYPES.register(bus);`
然后再注册另外两个
```java
@SubscribeEvent
public static void registerEntityLayers(EntityRenderersEvent.RegisterLayerDefinitions evt) {
    evt.registerLayerDefinition(FlyingSwordModel.LAYER_LOCATION, FlyingSwordModel::createBodyLayer);
}
@SubscribeEvent
public static void onClientEvent(FMLClientSetupEvent event){
    event.enqueueWork(()-&gt;{
        EntityRenderers.register(Registry.FLYING_SWORD_ENTITY.get(), FlyingSwordEntityRenderer::new);
    });
}
```
### 最后导入材质，进入游戏就可以用summon指令生成我们的实体啦

## 附完整代码
FlyingSwordEntity
```java
import com.mojang.logging.LogUtils;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import org.slf4j.Logger;
import net. minecraft. world. level. Level;

public class FlyingSwordEntity extends Entity {
    private static final Logger LOGGER = LogUtils.getLogger();  //创建日志
    //实体数据同步器(INT类型)
    private static final EntityDataAccessor&lt;Integer&gt; COUNTER =
            SynchedEntityData.defineId(FlyingSwordEntity.class, EntityDataSerializers.INT);
    @Override
    public void tick() {
        Integer i=this.entityData.get(COUNTER); //获取实体数据
        LOGGER.info(i.toString());  //打印日志
        if(!this.level().isClientSide()){   //服务端执行逻辑
            this.entityData.set(COUNTER,i+1);   //设置实体数据
        }
        super.tick();
    }
    //构造方法
    public FlyingSwordEntity(EntityType&lt;?&gt; entityType, Level level){
        super(entityType, level);
    }
    //实体数据同步器初始化
    @Override
    protected void defineSynchedData() {
        this.entityData.define(COUNTER,0);
    }
    @Override
    protected void readAdditionalSaveData(CompoundTag compoundTag) {
        this.entityData.set(COUNTER,compoundTag.getInt('counter'));
    }
    @Override
    protected void addAdditionalSaveData(CompoundTag compoundTag) {
        compoundTag.putInt('counter',this.entityData.get(COUNTER));
    }

}
```
FlyingSwordEntityRenderer
```java
import com.XXXYJade17.TestMod.TestMod;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import com.mojang.math.Axis;
import net.minecraft.client.model.EntityModel;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.entity.EntityRenderer;
import net.minecraft.client.renderer.entity.EntityRendererProvider;
import net.minecraft.client.renderer.texture.OverlayTexture;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.Entity;

public class FlyingSwordEntityRenderer extends EntityRenderer {
    private EntityModel&lt;FlyingSwordEntity&gt; flyingSwordModel;
    public FlyingSwordEntityRenderer(EntityRendererProvider.Context context) {
        super(context);
        flyingSwordModel = new FlyingSwordModel(context.bakeLayer(FlyingSwordModel.LAYER_LOCATION));
    }
    @Override
    public ResourceLocation getTextureLocation(Entity entity) {
        return new ResourceLocation(TestMod.MODID, 'textures/entity/flying_sword_entity.png');
    }
    @Override
    public void render(Entity entity, float entityYaw, float partialTick, PoseStack poseStack, MultiBufferSource buffer, int packedLight) {
        super.render(entity, entityYaw, partialTick, poseStack, buffer, packedLight);
        poseStack.pushPose();
        poseStack.mulPose(Axis.YN.rotationDegrees(45));
        poseStack.translate(0, -1, 0);
        VertexConsumer vertexConsumer = buffer.getBuffer(flyingSwordModel.renderType(getTextureLocation(entity)));
        this.flyingSwordModel.renderToBuffer(poseStack,vertexConsumer,packedLight, OverlayTexture.NO_OVERLAY,1f,1f,1f,1f);
        poseStack.popPose();
    }
}
```
FlyingSwordModel
```java
import com.XXXYJade17.TestMod.TestMod;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.model.EntityModel;
import net.minecraft.client.model.geom.ModelLayerLocation;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.client.model.geom.PartPose;
import net.minecraft.client.model.geom.builders.*;
import net.minecraft.resources.ResourceLocation;

public class FlyingSwordModel extends EntityModel&lt;FlyingSwordEntity&gt; {
    public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation(TestMod.MODID, 'flying_sword_entity'), 'main');
    private final ModelPart body;

    public FlyingSwordModel(ModelPart modelPart) {
        this.body = modelPart.getChild('body');
    }
    public static LayerDefinition createBodyLayer() {
        MeshDefinition meshDefinition = new MeshDefinition();   // 创建网格定义
        PartDefinition partDefinition = meshDefinition.getRoot();
        PartDefinition body= partDefinition.addOrReplaceChild('body',
                CubeListBuilder.create().texOffs(0, 0).addBox(-1.0F, -1.0F, -18.0F, 3.0F, 1.0F, 19.0F, new CubeDeformation(0.0F))
                .texOffs(0, 20).addBox(-3.0F, -2.0F, -1.0F, 7.0F, 3.0F, 3.0F, new CubeDeformation(0.0F))
                .texOffs(0, 0).addBox(-1.0F, -1.0F, 1.0F, 3.0F, 1.0F, 5.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 23.0F, 0.0F));
        return LayerDefinition.create(meshDefinition, 64, 64);
    }

    @Override
    public void setupAnim(FlyingSwordEntity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        //置剑身体body的三维旋转角度，分别对应于X轴（pLimbSwing）、Y轴（pNetHeadYaw）和Z轴（pHeadPitch）的旋转。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/11.Entity-shi-ti.html</guid><pubDate>Sat, 15 Mar 2025 15:39:51 +0000</pubDate></item><item><title>10.方块实体</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/10.-fang-kuai-shi-ti.html</link><description>## 一. 什么是方块实体
方块实体就是用于存储与单个方块相关联的数据，比如箱子里存的东西，熔炉里烧的东西
这里我们实现一个能够点击后计数的方块,这个计数应该被存储起来,并且退出游戏后读档保持原来的数值。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/10.-fang-kuai-shi-ti.html</guid><pubDate>Fri, 14 Mar 2025 13:36:00 +0000</pubDate></item><item><title>09.Tag</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/09.Tag.html</link><description>## 一.什么是Tag
Tag就是用于设置你注册的方块挖掘速度和挖掘等级之类的
## 二.项目结构
这里以挖掘等级最低为石镐为例,先手动创建目录
└─data
    ├─testmod
    └─minecraft
        └─tags
            └─blocks
                ├─mineable
                │   └─pickaxe.json
                └─needs_stone_tool.json
## 三.编辑Tag的json文件
**needs_stone_tool.json**
```json
{
  'replace': false,
  'values': [
    'testmod:example_block_01',
  ]
}
```
- replace : 就是是否取代原版文件，这里false就是在原版基础上添加
- valuse : 就是个列表，放你想要设置的方块。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/09.Tag.html</guid><pubDate>Wed, 12 Mar 2025 11:53:47 +0000</pubDate></item><item><title>08.战利品表</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/08.-zhan-li-pin-biao.html</link><description>## 一.什么是战利品表
战利品表是指你破坏了方块或者打死了实体的时候掉落的东西，也包含了奖励箱的内容。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/08.-zhan-li-pin-biao.html</guid><pubDate>Wed, 12 Mar 2025 09:18:00 +0000</pubDate></item><item><title>07.自定义装备</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/07.-zi-ding-yi-zhuang-bei.html</link><description>## 一.创建一个枚举类实现 ArmorMaterial 接口,并且实现重写方法
```java
public enum ExampleArmorMaterial implements ArmorMaterial {
    private final String name;
    private final int durabilityMultiplier;
    private final EnumMap&lt;ArmorItem.Type, Integer&gt; protectionFunctionForType;
    private final int enchantmentValue;
    private final SoundEvent sound;
    private final float toughness;
    private final float knockbackResistance;
    private final Supplier&lt;Ingredient&gt; repairIngredient;
    private static final EnumMap&lt;ArmorItem.Type, Integer&gt; HEALTH_FUNCTION_FOR_TYPE = 
            Util.make(new EnumMap&lt;&gt;(ArmorItem.Type.class), map -&gt; {
                map.put(ArmorItem.Type.BOOTS, 100);
                map.put(ArmorItem.Type.LEGGINGS,100);
                map.put(ArmorItem.Type.CHESTPLATE,100);
                map.put(ArmorItem.Type.HELMET, 100);
            }); 
    ExampleArmorMaterial(
            String name,
            int durabilityMultiplier,
            EnumMap&lt;ArmorItem.Type, Integer&gt; protectionFunctionForType,
            int enchantmentValue,
            SoundEvent sound,
            float toughness,
            float knockbackResistance,
            Supplier&lt;Ingredient&gt; repairIngredient
    ){
        this.name=name;
        this.durabilityMultiplier=durabilityMultiplier;
        this.protectionFunctionForType=protectionFunctionForType;
        this.enchantmentValue=enchantmentValue;
        this.sound=sound;
        this.toughness=toughness;
        this.knockbackResistance=knockbackResistance;
        this.repairIngredient=repairIngredient;
    }

    @Override
    public int getDurabilityForType(ArmorItem.Type type) {
        return HEALTH_FUNCTION_FOR_TYPE.get(type) * this.durabilityMultiplier;    //倍数与基础耐久相乘得到总耐久
    }

    @Override
    public int getDefenseForType(ArmorItem.Type type) {
        return this.protectionFunctionForType.get(type);
    }

    @Override
    public int getEnchantmentValue() {
        return enchantmentValue;
    }

    @Override
    public SoundEvent getEquipSound() {
        return sound;
    }

    @Override
    public Ingredient getRepairIngredient() {
        return repairIngredient.get();
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public float getToughness() {
        return toughness;
    }

    @Override
    public float getKnockbackResistance() {
        return knockbackResistance;
    }
}
```
变量含义：
- name : 装备材质名
- durabilityMultiplier : 耐久倍数,与基础耐久相乘得到总耐久
- protectionFunctionForType : 存储护甲的enummap
- enchantmentValue : 附魔能力值
- sound : 声音
- toughness : 盔甲韧性（减少高伤害攻击的穿透效果）
- knockbackResistance : 击退抗性百分比（0.0表示无抗性，1.0完全免疫击退）
- repairIngredient : 修复材料
## 二.在类中创建自定义的材质实例，基本与工具相同
```java
Example('example',
            50,     //耐久倍数
            Util.make(new EnumMap&lt;&gt;(ArmorItem.Type.class),map-&gt;{    //护甲表
        map.put(ArmorItem.Type.BOOTS, 20);     //鞋
        map.put(ArmorItem.Type.LEGGINGS, 20);  //裤
        map.put(ArmorItem.Type.CHESTPLATE, 20);//甲
        map.put(ArmorItem.Type.HELMET, 20);    //头
    }),20,  //附魔等级
            SoundEvents.ARMOR_EQUIP_DIAMOND,    //声音
            10.0F,  //韧性
            1.0F,   //击退抗性百分比
            ()-&gt;Ingredient.of(Registry.EXAMPLE_ITEM_01.get())); //修复物品
```
## 三.最后[注册](https://xxxyjade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html)装备
```java
    public static final Supplier&lt;Item&gt; EXAMPLE_HELMET=ITEMS.register('example_helmet',
            ()-&gt;new ArmorItem(ExampleArmorMaterial.Example,ArmorItem.Type.HELMET,new Item.Properties()));
    public static final Supplier&lt;Item&gt; EXAMPLE_CHESTPLATE=ITEMS.register('example_chestplate',
            ()-&gt;new ArmorItem(ExampleArmorMaterial.Example,ArmorItem.Type.HELMET,new Item.Properties()));
    public static final Supplier&lt;Item&gt; EXAMPLE_LEGGINGS=ITEMS.register('example_leggings',
            ()-&gt;new ArmorItem(ExampleArmorMaterial.Example,ArmorItem.Type.HELMET,new Item.Properties()));
    public static final Supplier&lt;Item&gt; EXAMPLE_BOOTS=ITEMS.register('example_boots',
            ()-&gt;new ArmorItem(ExampleArmorMaterial.Example,ArmorItem.Type.HELMET,new Item.Properties()));
```。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/07.-zi-ding-yi-zhuang-bei.html</guid><pubDate>Wed, 12 Mar 2025 08:29:35 +0000</pubDate></item><item><title>06.自定义工具</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/06.-zi-ding-yi-gong-ju.html</link><description>## 一. 老规矩现有Item再有工具，先注册一个[EXAMPLE_SWORD](https://xxxyjade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html)(示例剑)
## 二. 创建一个枚举类ExampleTier,实现 Tier 接口
Tier可以用于表示Minecraft中自定义工具的等级或品质
如果想要其他工具实现其他接口就行了，如镐（pickaxe）等等...
```java
public enum ExampleTier implements Tier {
    private final int level;
    private final int uses;
    private final float speed;
    private final float damage;
    private final int enchantmentValue;
    private final Supplier&lt;Ingredient&gt; repairIngredient;
    @Override
    public int getUses() {
        return this.uses;
    }
    @Override
    public float getSpeed() {
        return this.speed;
    }
    @Override
    public float getAttackDamageBonus() {
        return this.damage;
    }
    @Override
    public int getLevel() {
        return this.level;
    }
    @Override
    public int getEnchantmentValue() {
        return this.enchantmentValue;
    }
    @Override
    public Ingredient getRepairIngredient() {
        return this.repairIngredient.get();
    }
}
```
实现接口的方法及创建需要的变量
## 三. 创建构造方法
```java 
ExampleTier(int level, int uses, float speed, float damage, int enchantmentValue, Supplier&lt;Ingredient&gt; repairIngredient) {
        this.level = level;
        this.uses = uses;
        this.speed = speed;
        this.damage = damage;
        this.enchantmentValue = enchantmentValue;
        this.repairIngredient = repairIngredient;
    }
```
参数含义
- level :  工具等级
- uses :  使用次数（耐久度）
- speed :  挖掘速度
- damage :  伤害
- enchantmentValue :  附魔等级
- repairIngredient :  修复材料
## 四. 创建实例对象
```java
    Example(3,2000,10F,100F,30,() -&gt; Ingredient.of(Registry.EXAMPLE_ITEM_01.get()));
```
创建了一个等级为3，使用次数为2000，挖掘速度为10，伤害为100，附魔等级为30，修复材料为EXAMPLE_ITEM_01的工具材质
## 五. 调用实例
将注册改为如下形式
```java
public static final Supplier&lt;Item&gt; EXAMPLE_SWORD=ITEMS.register('example_sword',
            () -&gt;new SwordItem(ExampleTier.Example,100,0.1f,new Item.Properties()));
```
## 附完整代码
```java
import net.minecraft.world.item.Tier;
import net.minecraft.world.item.crafting.Ingredient;

import java.util.function.Supplier;

public enum ExampleTier implements Tier {
    Example(4,2000,10F,100F,30,() -&gt; Ingredient.of(Registry.EXAMPLE_ITEM_01.get()));

    private final int level;
    private final int uses;
    private final float speed;
    private final float damage;
    private final int enchantmentValue;
    private final Supplier&lt;Ingredient&gt; repairIngredient;
    ExampleTier(int level, int uses, float speed, float damage, int enchantmentValue, Supplier&lt;Ingredient&gt; repairIngredient) {
        this.level = level;
        this.uses = uses;
        this.speed = speed;
        this.damage = damage;
        this.enchantmentValue = enchantmentValue;
        this.repairIngredient = repairIngredient;
    }
    @Override
    public int getUses() {
        return this.uses;
    }

    @Override
    public float getSpeed() {
        return this.speed;
    }

    @Override
    public float getAttackDamageBonus() {
        return this.damage;
    }

    @Override
    public int getLevel() {
        return this.level;
    }

    @Override
    public int getEnchantmentValue() {
        return this.enchantmentValue;
    }

    @Override
    public Ingredient getRepairIngredient() {
        return this.repairIngredient.get();
    }
}

```。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/06.-zi-ding-yi-gong-ju.html</guid><pubDate>Tue, 11 Mar 2025 14:15:21 +0000</pubDate></item><item><title>05.自定义食物</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/05.-zi-ding-yi-shi-wu.html</link><description>## 一,这里同样需要一个物品,以[EXAMPLE_ITEM_02](https://xxxyjade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html)为例
## 二.创建一个FoodProperties对象
```java 
public static final FoodProperties FOOD_PROPERTIES = new FoodProperties.Builder()
            .saturationMod(10)      //饱食度恢复速度
            .nutrition(2)       //进食恢复饱食度
            .alwaysEat()        //满饥饿使用
            .effect(()-&gt; new MobEffectInstance(MobEffects.JUMP,10*20,10),1.0f)     //四个参数分别为效果，时间，等级，发生概率
            .build();
```
## 三.将属性传递给Item
将之前创建的FoodProperties对象传递给properties
```java
    public static final DeferredHolder&lt;Item, Item&gt; EXAMPLE_ITEM_02 = ITEMS.register('example_item_02',
            () -&gt; new Item(new Item.Properties().food(FOOD_PROPERTIES)));
```。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/05.-zi-ding-yi-shi-wu.html</guid><pubDate>Tue, 11 Mar 2025 07:19:31 +0000</pubDate></item><item><title>04.自定物品属性覆盖</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/04.-zi-ding-wu-pin-shu-xing-fu-gai.html</link><description>## 一.需要先注册一个物品，这里采用之前的EXAMPLE_ITEM_01
[参考链接](https://xxxyjade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html)
## 二.添加物品属性覆盖
```java
@Mod.EventBusSubscriber(modid = TestMod.MODID,bus = Mod.EventBusSubscriber.Bus.MOD,value = Dist.CLIENT)
public class PropertyRegistry {
    @SubscribeEvent
    public static void propertyOverrideRegistry(FMLClientSetupEvent event){
        event.enqueueWork(()-&gt;{     //加入主线程
            ItemProperties.register(Registry.EXAMPLE_ITEM_01.get(),
                new ResourceLocation(TestMod.MODID,'size'),
                    (itemStack, level, livingEntity, num)-&gt;{
                        return itemStack.getCount();
            });
        });
    }
}
```
-  new ResourceLocation(TestMod.MODID,'size') ： 这里创建了一个名为size的堆叠属性
- (itemStack, level, livingEntity, num)-&gt;{return itemStack.getCount();} :   这里返回堆叠数量
## 三. 修改json配置文件
```json
{
 'parent': 'minecraft:item/generated',
 'textures': {
   'layer0': 'item/iron_ingot'
 }
}
```
这是原来的配置文件（example_item_01.json),这里我们直接引用铁锭
我们在后面继续添加需要的配置文件
```json
{
'overrides': [
    {
      'predicate': {
        'testmod:size': 16
      },
      'model': 'item/gold_ingot'
    },
    {
      'predicate': {
        'testmod:size': 32
      },
      'model': 'item/diamond'
    }
  ]
}
```
表示堆叠数量到16时，材质变金锭，到32时变钻石
以此类推可以改成我们想要的状态或属性。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/04.-zi-ding-wu-pin-shu-xing-fu-gai.html</guid><pubDate>Tue, 11 Mar 2025 06:24:01 +0000</pubDate></item><item><title>03.自定义BlockState</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/03.-zi-ding-yi-BlockState.html</link><description>## 项目结构
src
├── main
│ ├── java
│ │ ├── com
│ │ │ ├── XXXYJade17
│ │ │ │ └── TestMod
│ │ │ │ ├── Registry.java
│ │ │ │ ├── StateExampleBlock.java
│ │ │ │ └── TestMod.java 
│ └── resources
│ ├── assets
│ │ ├── testmod
│ │ │ ├── blockstates
│ │ │ │ └── state_example_block.json
│ │ │ ├── lang
│ │ │ │ ├── en_us.json // 英文语言文件
│ │ │ │ └── zh_cn.json // 中文语言文件
│ │ │ ├── models
│ │ │ │ ├── block
│ │ │ │ │ ├── state_exampe_block_off.json
│ │ │ │ │ └── state_exampe_block_on.json
│ │ │ │ └── item
│ │ │ │ │ └── state_exampe_block.json
│ │ │ └── textures
│ │ │ │ └── block
│ │ │ │    ├── state_exampe_block_off.json.png
│ │ │ │    └── state_exampe_block_on.json.png
## 一.先创建一个类并且继承Block
```java
public class StateExampleBlock extends Block {
    //构造方法
    public StateExampleBlock(Properties properties) {
        super(properties);
    }
}
```
## 二.定义需要的状态属性
```java
public static final BooleanProperty LIT = BooleanProperty.create('lit');
```
- ​​声明一个布尔型方块状态属性 LIT，表示方块是否处于发光状态。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/03.-zi-ding-yi-BlockState.html</guid><pubDate>Mon, 10 Mar 2025 02:58:57 +0000</pubDate></item><item><title>02.自定义创造物品栏标签</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/02.-zi-ding-yi-chuang-zao-wu-pin-lan-biao-qian.html</link><description>## 项目结构
src
├── main
│ ├── java
│ │ ├── com
│ │ │ ├── XXXYJade17
│ │ │ │ └── TestMod
│ │ │ │ ├── Registry.java //注册类
│ │ │ │ ├── ModCreativeTab .java //自定义物品栏
│ │ │ │ └── TestMod.java //Mod主程序
│ └── resources
│ ├── assets
│ │ ├── testmod
│ │ │ ├── lang
│ │ │ │ ├── en_us.json // 英文语言文件
│ │ │ │ └── zh_cn.json // 中文语言文件

## 一.创建物品栏的注册器（与Block和Item类似）
```java
public static final DeferredRegister&lt;CreativeModeTab&gt; CREATIVE_MODE_TABS = 
    DeferredRegister.create(Registries.CREATIVE_MODE_TAB, TestMod.MODID);
```
## 二.注册物品栏，并且添加物品
`public static final String EXAMPLE_MOD_TAB_STRING = 'creativetab.example_tab';`
这里可以将物品栏的名字定义为一个变量
```java
public static final Supplier&lt;CreativeModeTab&gt; EXAMPLE_TAB  = 
    CREATIVE_MODE_TABS.register('example_tab',
        () -&gt; CreativeModeTab.builder()
            .withTabsBefore(CreativeModeTabs.COMBAT)        //将自定义标签页插入原版'战斗'标签页之前
            .title(Component.translatable(EXAMPLE_MOD_TAB_STRING))        //设置标签名
            .icon(() -&gt; new ItemStack(Registry.EXAMPLE_ITEM_01.get()))     //设置物品栏图标
            .displayItems((pParameters, pOutput) -&gt; {
                pOutput.accept(Registry.EXAMPLE_ITEM_01.get());      //添加物品到物品栏
                pOutput.accept(Registry.EXAMPLE_ITEM_02.get());
                pOutput.accept(Registry.EXAMPLE_BLOCK_01.get());
                pOutput.accept(Registry.EXAMPLE_BLOCK_02.get());
            })
            .build());
```
## 三.添加语言文件
同Block和Item
```json
//en_us.json
{
  'creativetab.example_tab': 'Example Tab'
}
//zh_cn.json
{ 
 'creativetab.example_tab': '示例创造模式标签'
}
```

。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/02.-zi-ding-yi-chuang-zao-wu-pin-lan-biao-qian.html</guid><pubDate>Sun, 09 Mar 2025 15:12:40 +0000</pubDate></item><item><title>01.注册物品和方块</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html</link><description>## 项目结构
src
├── main
│   ├── java
│   │   ├── com
│   │   │   ├── XXXYJade17
│   │   │   │   └── TestMod
│   │   │   │       ├── Registry.java      //注册类
│   │   │   │       └── TestMod.java     //Mod主程序
│   └── resources
│       ├── assets
│       │   ├── testmod
│       │   │   ├── lang
│       │   │   │   ├── en_us.json  // 英文语言文件
│       │   │   │   └── zh_cn.json  // 中文语言文件
│       │   │   ├── models
│       │   │   │   ├── block
│       │   │   │   │   ├── example_block_01.json 
│       │   │   │   │   └── example_block_02.json
│       │   │   │   └── item
│       │   │   │       ├── example_block_01.json  
│       │   │   │       ├── example_block_02.json    
│       │   │   │       ├── example_item_01.json  
│       │   │   │       └── example_item_02.json
│       │   │   └── textures
│       │   │   │   ├── block
│       │   │   │   │   ├── example_block_01.png
│       │   │   │   │   └── example_block_02.png
│       │   │   │   └── item
│       │   │   │       ├── example_item_01.png
│       │   │   │       └── example_item_02.png
## 一.创建延迟注册容器
```java
//Block方块容器
private static final DeferredRegister&lt;Block&gt; BLOCKS = 
    DeferredRegister.create(Registries.BLOCK, TestMod.MODID);
//Item物品容器
private static final DeferredRegister&lt;Item&gt; ITEMS =
    DeferredRegister.create(Registries.ITEM, TestMod.MODID);
```
## 二.创建注册物品,这里提供两种方式
### 1.基础注册方式（Supplier）
```java
//Block
private static final Supplier&lt;Block&gt; EXAMPLE_BLOCK_01 = 
   BLOCKS.register('example_block_01', 
        () -&gt; new Block(BlockBehaviour.Properties.of()));
//Item
 private static final Supplier&lt;Item&gt; EXAMPLE_ITEM_01 = 
     ITEMS.register('example_item_01',
        () -&gt; new Item(new Item.Properties()));
```
### 2.现代注册方式（DeferredHolder）
```java
//Block
private static final DeferredHolder&lt;Block, Block&gt; EXAMPLE_BLOCK_02 = 
    BLOCKS.register('example_block_02', 
        () -&gt; new Block(BlockBehaviour.Properties.of()));
//Item
private static final DeferredHolder&lt;Item, Item&gt; EXAMPLE_ITEM_02 = 
    ITEMS.register('example_item_02', 
        () -&gt; new Item(new Item.Properties()));
```
### *三.如果想要注册Block还需要注册对应的BlockItem
同样有两种方式
```java
//使用Supplier
private static final Supplier&lt;Item&gt; EXAMPLE_BLOCK_01_ITEM = 
    ITEMS.register('example_block_01',
        () -&gt; new BlockItem(EXAMPLE_BLOCK_01.get(), 
            new Item.Properties()));
//使用DeferredHolder
private static final DeferredHolder&lt;Item,Item&gt; EXAMPLE_BLOCK_02_ITEM = 
    ITEMS.register('example_block_02',
        () -&gt; new BlockItem(EXAMPLE_BLOCK_02.get(),
            new Item.Properties()));
```
### 四.创建注册函数，将注册器加到总线
```java
public static void register(IEventBus bus){
            BLOCKS.register(bus);
            ITEMS.register(bus);
    }
```
然后在主程序中引用即可
```java
public TestMod(IEventBus bus, ModContainer container) {
      Registry.register(bus);
   }
```
### 五.添加语言文件
先在lang包中添加语言文件en_us.json,一般项目自带
```json
{
  'block.testmod.example_block_01': 'Example Block 01',
  'block.testmod.example_block_02': 'Example Block 02',
  'item.testmod.example_item_01': 'Example Item 01',
  'item.testmod.example_item_02': 'Example Item 02'
}
```
想要中文文件，再添加一个zh_cn.json即可
```json
{
  'block.testmod.example_block_01': '示例方块01',
  'block.testmod.example_block_02': '示例方块02',
  'item.testmod.example_item_01': '示例物品01',
  'item.testmod.example_item_02': '示例物品02'
}
```
### 六.添加模型和材质文件
先手动创建目录
├─resources
├── assets
│   ├── testmod
│   │   ├── lang
│   │   ├── models
│   │   │   ├── block
│   │   │   └── item
│   │   └── textures
│   │   │   ├── block
│   │   │   └── item
- Item
```json
{
 'parent': 'minecraft:item/generated',
 'textures': {
   'layer0': 'testmod:item/example_item_01'
 }
}
```
- Block
先配置Block，这里采用六面同材质，根据需求可以自己更改
```json
{
  'parent': 'block/cube_all',
  'textures': {
    'all': 'testmod:block/example_block_01'
  }
}
```
   之后还需要在 model/Item 里再添加BlockItem,文件名同block
```json
{
  'parent': 'testmod:block/example_block_01',
 }
```
## 附完整代码
### 注册类
```java
import net.minecraft.core.registries.Registries;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.registries.DeferredRegister;
import java.util.function.Supplier;

public class Registry {
    //延迟注册器
    public static final DeferredRegister&lt;Block&gt; BLOCKS = DeferredRegister.create(Registries.BLOCK, TestMod.MODID);
    public static final DeferredRegister&lt;Item&gt; ITEMS = DeferredRegister.create(Registries.ITEM, TestMod.MODID);
    //BLOCK
    public static final Supplier&lt;Block&gt; EXAMPLE_BLOCK_01 = BLOCKS.register('example_block_01',
            () -&gt; new Block(BlockBehaviour.Properties.of()));
    public static final DeferredHolder&lt;Block, Block&gt; EXAMPLE_BLOCK_02 = BLOCKS.register('example_block_02',
            () -&gt; new Block(BlockBehaviour.Properties.of()));
    //BLOCK_ITEM
    public static final Supplier&lt;Item&gt; EXAMPLE_BLOCK_01_ITEM = ITEMS.register('example_block_01',
            () -&gt; new BlockItem(EXAMPLE_BLOCK_01.get(), new Item.Properties()));
    public static final DeferredHolder&lt;Item,Item&gt; EXAMPLE_BLOCK_02_ITEM = ITEMS.register('example_block_02',
            () -&gt; new BlockItem(EXAMPLE_BLOCK_02.get(), new Item.Properties()));
    //ITEM
    public static final Supplier&lt;Item&gt;  EXAMPLE_ITEM_01= ITEMS.register('example_item_01',
            () -&gt; new Item(new Item.Properties()));
    public static final DeferredHolder&lt;Item, Item&gt; EXAMPLE_ITEM_02 = ITEMS.register('example_item_02',
            () -&gt; new Item(new Item.Properties()));
    //BLOCK STATE
    public static final Supplier&lt;Block&gt; STATE_EXAMPLE_BLOCK = BLOCKS.register('state_example_block',
            () -&gt; new StateExampleBlock(BlockBehaviour.Properties.of()));
    public static final Supplier&lt;Item&gt; STATE_EXAMPLE_BLOCK_ITEM = ITEMS.register('state_example_block',
            () -&gt; new BlockItem(STATE_EXAMPLE_BLOCK.get(), new Item.Properties()));
    //注册方法
    public static void register(IEventBus bus){
            BLOCKS.register(bus);
            ITEMS.register(bus);
            ModCreativeTab.register(bus);
    }
}
```
### 主程序
```java
import net.neoforged.bus.api.IEventBus;
import net.neoforged.fml.ModContainer;
import net.neoforged.fml.common.Mod;

@Mod(TestMod.MODID)
public class TestMod {
   public static final String MODID = 'testmod';
   public TestMod(IEventBus bus, ModContainer container) {
      Registry.register(bus);
   }
}

```。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html</guid><pubDate>Sun, 09 Mar 2025 13:56:19 +0000</pubDate></item></channel></rss>