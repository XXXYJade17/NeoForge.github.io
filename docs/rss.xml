<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>XXXYJade's NeoForge-1.20.4</title><link>https://XXXYJade17.github.io/NeoForge.github.io</link><description>学习笔记</description><copyright>XXXYJade's NeoForge-1.20.4</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/196541443?v=4</url><title>avatar</title><link>https://XXXYJade17.github.io/NeoForge.github.io</link></image><lastBuildDate>Tue, 11 Mar 2025 14:15:53 +0000</lastBuildDate><managingEditor>XXXYJade's NeoForge-1.20.4</managingEditor><ttl>60</ttl><webMaster>XXXYJade's NeoForge-1.20.4</webMaster><item><title>06.自定义工具</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/06.-zi-ding-yi-gong-ju.html</link><description>## 一. 老规矩现有Item再有工具，先注册一个[EXAMPLE_SWORD](https://xxxyjade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html)(示例剑)
## 二. 创建一个枚举类ExampleTier,实现 Tier 接口
Tier可以用于表示Minecraft中自定义工具的等级或品质
```java
public enum ExampleTier implements Tier {
    private final int level;
    private final int uses;
    private final float speed;
    private final float damage;
    private final int enchantmentValue;
    private final Supplier&lt;Ingredient&gt; repairIngredient;
    @Override
    public int getUses() {
        return this.uses;
    }
    @Override
    public float getSpeed() {
        return this.speed;
    }
    @Override
    public float getAttackDamageBonus() {
        return this.damage;
    }
    @Override
    public int getLevel() {
        return this.level;
    }
    @Override
    public int getEnchantmentValue() {
        return this.enchantmentValue;
    }
    @Override
    public Ingredient getRepairIngredient() {
        return this.repairIngredient.get();
    }
}
```
实现接口的方法及创建需要的变量
## 三. 创建构造方法
```java 
ExampleTier(int level, int uses, float speed, float damage, int enchantmentValue, Supplier&lt;Ingredient&gt; repairIngredient) {
        this.level = level;
        this.uses = uses;
        this.speed = speed;
        this.damage = damage;
        this.enchantmentValue = enchantmentValue;
        this.repairIngredient = repairIngredient;
    }
```
参数含义
- level :  工具等级
- uses :  使用次数（耐久度）
- speed :  挖掘速度
- damage :  伤害
- enchantmentValue :  附魔等级
- repairIngredient :  修复材料
## 四. 创建实例对象
```java
    Example(3,2000,10F,100F,30,() -&gt; Ingredient.of(Registry.EXAMPLE_ITEM_01.get()));
```
创建了一个等级为3，使用次数为2000，挖掘速度为10，伤害为100，附魔等级为30，修复材料为EXAMPLE_ITEM_01的工具材质
## 五. 调用实例
将注册改为如下形式
```java
public static final Supplier&lt;Item&gt; EXAMPLE_SWORD=ITEMS.register('example_sword',
            () -&gt;new SwordItem(ExampleTier.Example,100,0.1f,new Item.Properties()));
```
## 附完整代码
```java
import net.minecraft.world.item.Tier;
import net.minecraft.world.item.crafting.Ingredient;

import java.util.function.Supplier;

public enum ExampleTier implements Tier {
    Example(4,2000,10F,100F,30,() -&gt; Ingredient.of(Registry.EXAMPLE_ITEM_01.get()));

    private final int level;
    private final int uses;
    private final float speed;
    private final float damage;
    private final int enchantmentValue;
    private final Supplier&lt;Ingredient&gt; repairIngredient;
    ExampleTier(int level, int uses, float speed, float damage, int enchantmentValue, Supplier&lt;Ingredient&gt; repairIngredient) {
        this.level = level;
        this.uses = uses;
        this.speed = speed;
        this.damage = damage;
        this.enchantmentValue = enchantmentValue;
        this.repairIngredient = repairIngredient;
    }
    @Override
    public int getUses() {
        return this.uses;
    }

    @Override
    public float getSpeed() {
        return this.speed;
    }

    @Override
    public float getAttackDamageBonus() {
        return this.damage;
    }

    @Override
    public int getLevel() {
        return this.level;
    }

    @Override
    public int getEnchantmentValue() {
        return this.enchantmentValue;
    }

    @Override
    public Ingredient getRepairIngredient() {
        return this.repairIngredient.get();
    }
}

```。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/06.-zi-ding-yi-gong-ju.html</guid><pubDate>Tue, 11 Mar 2025 14:15:21 +0000</pubDate></item><item><title>05.自定义食物</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/05.-zi-ding-yi-shi-wu.html</link><description>## 一,这里同样需要一个物品,以[EXAMPLE_ITEM_02](https://xxxyjade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html)为例
## 二.创建一个FoodProperties对象
```java 
public static final FoodProperties FOOD_PROPERTIES = new FoodProperties.Builder()
            .saturationMod(10)      //饱食度恢复速度
            .nutrition(2)       //进食恢复饱食度
            .alwaysEat()        //满饥饿使用
            .effect(()-&gt; new MobEffectInstance(MobEffects.JUMP,10*20,10),1.0f)     //四个参数分别为效果，时间，等级，发生概率
            .build();
```
## 三.将属性传递给Item
将之前创建的FoodProperties对象传递给properties
```java
    public static final DeferredHolder&lt;Item, Item&gt; EXAMPLE_ITEM_02 = ITEMS.register('example_item_02',
            () -&gt; new Item(new Item.Properties().food(FOOD_PROPERTIES)));
```。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/05.-zi-ding-yi-shi-wu.html</guid><pubDate>Tue, 11 Mar 2025 07:19:31 +0000</pubDate></item><item><title>04.自定物品属性覆盖</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/04.-zi-ding-wu-pin-shu-xing-fu-gai.html</link><description>## 一.需要先注册一个物品，这里采用之前的EXAMPLE_ITEM_01
[参考链接](https://xxxyjade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html)
## 二.添加物品属性覆盖
```java
@Mod.EventBusSubscriber(modid = TestMod.MODID,bus = Mod.EventBusSubscriber.Bus.MOD,value = Dist.CLIENT)
public class PropertyRegistry {
    @SubscribeEvent
    public static void propertyOverrideRegistry(FMLClientSetupEvent event){
        event.enqueueWork(()-&gt;{     //加入主线程
            ItemProperties.register(Registry.EXAMPLE_ITEM_01.get(),
                new ResourceLocation(TestMod.MODID,'size'),
                    (itemStack, level, livingEntity, num)-&gt;{
                        return itemStack.getCount();
            });
        });
    }
}
```
-  new ResourceLocation(TestMod.MODID,'size') ： 这里创建了一个名为size的堆叠属性
- (itemStack, level, livingEntity, num)-&gt;{return itemStack.getCount();} :   这里返回堆叠数量
## 三. 修改json配置文件
```json
{
 'parent': 'minecraft:item/generated',
 'textures': {
   'layer0': 'item/iron_ingot'
 }
}
```
这是原来的配置文件（example_item_01.json),这里我们直接引用铁锭
我们在后面继续添加需要的配置文件
```json
{
'overrides': [
    {
      'predicate': {
        'testmod:size': 16
      },
      'model': 'item/gold_ingot'
    },
    {
      'predicate': {
        'testmod:size': 32
      },
      'model': 'item/diamond'
    }
  ]
}
```
表示堆叠数量到16时，材质变金锭，到32时变钻石
以此类推可以改成我们想要的状态或属性。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/04.-zi-ding-wu-pin-shu-xing-fu-gai.html</guid><pubDate>Tue, 11 Mar 2025 06:24:01 +0000</pubDate></item><item><title>03.自定义BlockState</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/03.-zi-ding-yi-BlockState.html</link><description>## 项目结构
src
├── main
│ ├── java
│ │ ├── com
│ │ │ ├── XXXYJade17
│ │ │ │ └── TestMod
│ │ │ │ ├── Registry.java
│ │ │ │ ├── StateExampleBlock.java
│ │ │ │ └── TestMod.java 
│ └── resources
│ ├── assets
│ │ ├── testmod
│ │ │ ├── blockstates
│ │ │ │ └── state_example_block.json
│ │ │ ├── lang
│ │ │ │ ├── en_us.json // 英文语言文件
│ │ │ │ └── zh_cn.json // 中文语言文件
│ │ │ ├── models
│ │ │ │ ├── block
│ │ │ │ │ ├── state_exampe_block_off.json
│ │ │ │ │ └── state_exampe_block_on.json
│ │ │ │ └── item
│ │ │ │ │ └── state_exampe_block.json
│ │ │ └── textures
│ │ │ │ └── block
│ │ │ │    ├── state_exampe_block_off.json.png
│ │ │ │    └── state_exampe_block_on.json.png
## 一.先创建一个类并且继承Block
```java
public class StateExampleBlock extends Block {
    //构造方法
    public StateExampleBlock(Properties properties) {
        super(properties);
    }
}
```
## 二.定义需要的状态属性
```java
public static final BooleanProperty LIT = BooleanProperty.create('lit');
```
- ​​声明一个布尔型方块状态属性 LIT，表示方块是否处于发光状态。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/03.-zi-ding-yi-BlockState.html</guid><pubDate>Mon, 10 Mar 2025 02:58:57 +0000</pubDate></item><item><title>02.自定义创造物品栏标签</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/02.-zi-ding-yi-chuang-zao-wu-pin-lan-biao-qian.html</link><description>## 项目结构
src
├── main
│ ├── java
│ │ ├── com
│ │ │ ├── XXXYJade17
│ │ │ │ └── TestMod
│ │ │ │ ├── Registry.java //注册类
│ │ │ │ ├── ModCreativeTab .java //自定义物品栏
│ │ │ │ └── TestMod.java //Mod主程序
│ └── resources
│ ├── assets
│ │ ├── testmod
│ │ │ ├── lang
│ │ │ │ ├── en_us.json // 英文语言文件
│ │ │ │ └── zh_cn.json // 中文语言文件

## 一.创建物品栏的注册器（与Block和Item类似）
```java
public static final DeferredRegister&lt;CreativeModeTab&gt; CREATIVE_MODE_TABS = 
    DeferredRegister.create(Registries.CREATIVE_MODE_TAB, TestMod.MODID);
```
## 二.注册物品栏，并且添加物品
`public static final String EXAMPLE_MOD_TAB_STRING = 'creativetab.example_tab';`
这里可以将物品栏的名字定义为一个变量
```java
public static final Supplier&lt;CreativeModeTab&gt; EXAMPLE_TAB  = 
    CREATIVE_MODE_TABS.register('example_tab',
        () -&gt; CreativeModeTab.builder()
            .withTabsBefore(CreativeModeTabs.COMBAT)        //将自定义标签页插入原版'战斗'标签页之前
            .title(Component.translatable(EXAMPLE_MOD_TAB_STRING))        //设置标签名
            .icon(() -&gt; new ItemStack(Registry.EXAMPLE_ITEM_01.get()))     //设置物品栏图标
            .displayItems((pParameters, pOutput) -&gt; {
                pOutput.accept(Registry.EXAMPLE_ITEM_01.get());      //添加物品到物品栏
                pOutput.accept(Registry.EXAMPLE_ITEM_02.get());
                pOutput.accept(Registry.EXAMPLE_BLOCK_01.get());
                pOutput.accept(Registry.EXAMPLE_BLOCK_02.get());
            })
            .build());
```
## 三.添加语言文件
同Block和Item
```json
//en_us.json
{
  'creativetab.example_tab': 'Example Tab'
}
//zh_cn.json
{ 
 'creativetab.example_tab': '示例创造模式标签'
}
```

。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/02.-zi-ding-yi-chuang-zao-wu-pin-lan-biao-qian.html</guid><pubDate>Sun, 09 Mar 2025 15:12:40 +0000</pubDate></item><item><title>01.注册物品和方块</title><link>https://XXXYJade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html</link><description>## 项目结构
src
├── main
│   ├── java
│   │   ├── com
│   │   │   ├── XXXYJade17
│   │   │   │   └── TestMod
│   │   │   │       ├── Registry.java      //注册类
│   │   │   │       └── TestMod.java     //Mod主程序
│   └── resources
│       ├── assets
│       │   ├── testmod
│       │   │   ├── lang
│       │   │   │   ├── en_us.json  // 英文语言文件
│       │   │   │   └── zh_cn.json  // 中文语言文件
│       │   │   ├── models
│       │   │   │   ├── block
│       │   │   │   │   ├── example_block_01.json 
│       │   │   │   │   └── example_block_02.json
│       │   │   │   └── item
│       │   │   │       ├── example_block_01.json  
│       │   │   │       ├── example_block_02.json    
│       │   │   │       ├── example_item_01.json  
│       │   │   │       └── example_item_02.json
│       │   │   └── textures
│       │   │   │   ├── block
│       │   │   │   │   ├── example_block_01.png
│       │   │   │   │   └── example_block_02.png
│       │   │   │   └── item
│       │   │   │       ├── example_item_01.png
│       │   │   │       └── example_item_02.png
## 一.创建延迟注册容器
```java
//Block方块容器
private static final DeferredRegister&lt;Block&gt; BLOCKS = 
    DeferredRegister.create(Registries.BLOCK, TestMod.MODID);
//Item物品容器
private static final DeferredRegister&lt;Item&gt; ITEMS =
    DeferredRegister.create(Registries.ITEM, TestMod.MODID);
```
## 二.创建注册物品,这里提供两种方式
### 1.基础注册方式（Supplier）
```java
//Block
private static final Supplier&lt;Block&gt; EXAMPLE_BLOCK_01 = 
   BLOCKS.register('example_block_01', 
        () -&gt; new Block(BlockBehaviour.Properties.of()));
//Item
 private static final Supplier&lt;Item&gt; EXAMPLE_ITEM_01 = 
     ITEMS.register('example_item_01',
        () -&gt; new Item(new Item.Properties()));
```
### 2.现代注册方式（DeferredHolder）
```java
//Block
private static final DeferredHolder&lt;Block, Block&gt; EXAMPLE_BLOCK_02 = 
    BLOCKS.register('example_block_02', 
        () -&gt; new Block(BlockBehaviour.Properties.of()));
//Item
private static final DeferredHolder&lt;Item, Item&gt; EXAMPLE_ITEM_02 = 
    ITEMS.register('example_item_02', 
        () -&gt; new Item(new Item.Properties()));
```
### *三.如果想要注册Block还需要注册对应的BlockItem
同样有两种方式
```java
//使用Supplier
private static final Supplier&lt;Item&gt; EXAMPLE_BLOCK_01_ITEM = 
    ITEMS.register('example_block_01',
        () -&gt; new BlockItem(EXAMPLE_BLOCK_01.get(), 
            new Item.Properties()));
//使用DeferredHolder
private static final DeferredHolder&lt;Item,Item&gt; EXAMPLE_BLOCK_02_ITEM = 
    ITEMS.register('example_block_02',
        () -&gt; new BlockItem(EXAMPLE_BLOCK_02.get(),
            new Item.Properties()));
```
### 四.创建注册函数，将注册器加到总线
```java
public static void register(IEventBus bus){
            BLOCKS.register(bus);
            ITEMS.register(bus);
    }
```
然后在主程序中引用即可
```java
public TestMod(IEventBus bus, ModContainer container) {
      Registry.register(bus);
   }
```
### 五.添加语言文件
先在lang包中添加语言文件en_us.json,一般项目自带
```json
{
  'block.testmod.example_block_01': 'Example Block 01',
  'block.testmod.example_block_02': 'Example Block 02',
  'item.testmod.example_item_01': 'Example Item 01',
  'item.testmod.example_item_02': 'Example Item 02'
}
```
想要中文文件，再添加一个zh_cn.json即可
```json
{
  'block.testmod.example_block_01': '示例方块01',
  'block.testmod.example_block_02': '示例方块02',
  'item.testmod.example_item_01': '示例物品01',
  'item.testmod.example_item_02': '示例物品02'
}
```
### 六.添加模型和材质文件
先手动创建目录
├─resources
├── assets
│   ├── testmod
│   │   ├── lang
│   │   ├── models
│   │   │   ├── block
│   │   │   └── item
│   │   └── textures
│   │   │   ├── block
│   │   │   └── item
- Item
```json
{
 'parent': 'minecraft:item/generated',
 'textures': {
   'layer0': 'testmod:item/example_item_01'
 }
}
```
- Block
先配置Block，这里采用六面同材质，根据需求可以自己更改
```json
{
  'parent': 'block/cube_all',
  'textures': {
    'all': 'testmod:block/example_block_01'
  }
}
```
   之后还需要在 model/Item 里再添加BlockItem,文件名同block
```json
{
  'parent': 'testmod:block/example_block_01',
 }
```
## 附完整代码
### 注册类
```java
import net.minecraft.core.registries.Registries;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.neoforge.registries.DeferredRegister;
import java.util.function.Supplier;

public class Registry {
    //延迟注册器
    public static final DeferredRegister&lt;Block&gt; BLOCKS = DeferredRegister.create(Registries.BLOCK, TestMod.MODID);
    public static final DeferredRegister&lt;Item&gt; ITEMS = DeferredRegister.create(Registries.ITEM, TestMod.MODID);
    //BLOCK
    public static final Supplier&lt;Block&gt; EXAMPLE_BLOCK_01 = BLOCKS.register('example_block_01',
            () -&gt; new Block(BlockBehaviour.Properties.of()));
    public static final DeferredHolder&lt;Block, Block&gt; EXAMPLE_BLOCK_02 = BLOCKS.register('example_block_02',
            () -&gt; new Block(BlockBehaviour.Properties.of()));
    //BLOCK_ITEM
    public static final Supplier&lt;Item&gt; EXAMPLE_BLOCK_01_ITEM = ITEMS.register('example_block_01',
            () -&gt; new BlockItem(EXAMPLE_BLOCK_01.get(), new Item.Properties()));
    public static final DeferredHolder&lt;Item,Item&gt; EXAMPLE_BLOCK_02_ITEM = ITEMS.register('example_block_02',
            () -&gt; new BlockItem(EXAMPLE_BLOCK_02.get(), new Item.Properties()));
    //ITEM
    public static final Supplier&lt;Item&gt;  EXAMPLE_ITEM_01= ITEMS.register('example_item_01',
            () -&gt; new Item(new Item.Properties()));
    public static final DeferredHolder&lt;Item, Item&gt; EXAMPLE_ITEM_02 = ITEMS.register('example_item_02',
            () -&gt; new Item(new Item.Properties()));
    //BLOCK STATE
    public static final Supplier&lt;Block&gt; STATE_EXAMPLE_BLOCK = BLOCKS.register('state_example_block',
            () -&gt; new StateExampleBlock(BlockBehaviour.Properties.of()));
    public static final Supplier&lt;Item&gt; STATE_EXAMPLE_BLOCK_ITEM = ITEMS.register('state_example_block',
            () -&gt; new BlockItem(STATE_EXAMPLE_BLOCK.get(), new Item.Properties()));
    //注册方法
    public static void register(IEventBus bus){
            BLOCKS.register(bus);
            ITEMS.register(bus);
            ModCreativeTab.register(bus);
    }
}
```
### 主程序
```java
import net.neoforged.bus.api.IEventBus;
import net.neoforged.fml.ModContainer;
import net.neoforged.fml.common.Mod;

@Mod(TestMod.MODID)
public class TestMod {
   public static final String MODID = 'testmod';
   public TestMod(IEventBus bus, ModContainer container) {
      Registry.register(bus);
   }
}

```。</description><guid isPermaLink="true">https://XXXYJade17.github.io/NeoForge.github.io/post/01.-zhu-ce-wu-pin-he-fang-kuai.html</guid><pubDate>Sun, 09 Mar 2025 13:56:19 +0000</pubDate></item></channel></rss>